1. What are expression trees in C#, and how are they used?
2. Explain covariance and contravariance in C# with relevant examples.
3. Describe dynamic object capabilities in C# and when you would use them.
4. What is the purpose of the unsafe keyword in C#? Provide an example.
5. How does the yield return statement work, and what are its limitations?
6. Explain the differences between struct and class in C#.
7. Describe tail call optimization and its relevance in C#.
8. What is reflection in C#, and how can it be used to inspect types and assemblies?
9. Explain the concept of asynchronous streams in C# 8 and later versions.
10. How does pattern matching work in C#, and what are its advantages?
11. Describe the concept of a delegate contravariance and covariance.
12. What are extension properties, and can you provide an example?
13. Explain the concept of a covariant and contravariant interface.
14. How can you implement a custom iterator using the yield statement?
15. Describe the use of the readonly modifier in C# and how it affects thread safety.
16. Explain how the default keyword is used in C# and its implications.
17. Describe the differences between readonly and const fields in C#.
18. What are interpolated strings, and how do they improve string formatting?
19. Explain the use of local functions in C# and their benefits.
20. How does the in parameter modifier improve performance in C#?
21. Describe the differences between stack memory and heap memory in C#.
22. How can you optimize memory usage in large-scale C# applications?
23. Explain the concept of escape analysis in relation to memory optimization.
24. Describe the purpose of value tasks in asynchronous programming.
25. What is the IAsyncEnumerable interface, and how does it relate to asynchronous streams?
26. Explain the concept of ValueTask and its benefits in high-performance code.
27. How can you implement a custom awaiter in C#?
28. Describe the difference between catch and catch when clauses.
29. Explain how you can handle exceptions in asynchronous code using Task.Exception property.
30. What is the purpose of the ExceptionDispatchInfo class?
31. Describe the differences between ref and out parameters in C#.
32. How does pattern matching work with the switch statement in C#?
33. Explain the concept of local functions in C# and their use cases.
34. Describe the behavior of the as operator and the is operator.
35. What is deferred execution in LINQ, and why is it important?
36. Explain how you can implement custom LINQ operators in C#.
37. Describe the differences between SingleOrDefault, FirstOrDefault, and LastOrDefault.
38. What is a generic type constraint, and how can you use it to restrict type parameters?
39. Explain the purpose of a generic type variance in C#.
40. Describe how you can create and use custom attributes in C#.
41. Explain the use of conditional attributes and how they affect compilation.
42. Describe the async and await pattern in asynchronous programming.
43. What is a thread pool, and how does C# manage threads through it?
44. Explain the concept of parallel programming in C# and the Parallel class.
45. Describe the differences between Mutex, Semaphore, and Monitor.
46. Explain multicast delegates and how you can combine them.
47. How does C# handle events from multiple sources using multicast delegates?
48. Describe the different generations in the .NET garbage collector.
49. How can you optimize garbage collection in C# applications?
50. Explain the use of expression trees in C# and their application in LINQ providers.
51. How can you create and use expression trees to build dynamic queries?
52. What are local functions, and how do they differ from lambda expressions?
53. Explain the concept of tuple types and tuple deconstruction in C#.
54. Describe the new features introduced in C# 9, such as records, with examples.
55. How can you implement pattern-based null checks in C# 9 using the 'not null' operator?
56. Explain the differences between stackalloc and new in memory allocation.
57. What is the purpose of the stackalloc keyword, and when might you use it?
58. Explain the use of the using directive versus the using statement in C#.
59. Describe the concept of string interpolation and its advantages over traditional string concatenation.
60. What are interpolated verbatim strings, and how do they work?
61. How does the async keyword affect the behavior of a method in C#?
62. Describe the concept of pinning and its relevance in managed and unmanaged memory.
63. How can you analyze memory usage and performance bottlenecks in a C# application?
64. Explain the differences between a WeakReference and a ConditionalWeakTable.
65. Describe the concept of asynchronous state machines and how they relate to async and await.
66. What is the purpose of the ConfigureAwait method, and how can you use it to improve performance?
67. Explain the concept of the ValueTask<TResult> type and its benefits.
68. Describe the Producer-Consumer pattern and how it can be implemented in C#.
69. Explain the difference between Task.Run and Task.Factory.StartNew.
70. What are the advantages and disadvantages of using Thread.Sleep for waiting in a multi-threaded application?
80. How can you handle and propagate exceptions in asynchronous code?
81. Explain the concept of exception filters and how they can improve debugging.
82. What are expression trees, and how do they relate to LINQ providers?
83. Explain how you can implement custom LINQ operators using expression trees.
84. How can you optimize Entity Framework queries for performance in a senior developer role?
85. Explain the concept of query translation in Entity Framework.
86. Describe the concept of "ambient context" and its relation to dependency injection.
87. How can you implement a custom dependency injection container in a C# application?
88. Explain the benefits and drawbacks of constructor injection, property injection, and method injection.
89. Transient, Scoped, Singleton.
90. Describe the concept of middleware and filter in ASP.NET Core and its role in request processing.
91. How can you implement cross-cutting concerns like logging and authentication in an ASP.NET application?
92. Explain the Command pattern and provide a real-world scenario where it could be applied.
93. Describe the Chain of Responsibility pattern and its use in creating flexible pipelines.
94. Explain the concept of large object heap (LOH) fragmentation and its impact on performance.
95. How can you manage memory in performance-critical applications using object pooling?
96. Describe the differences between symmetric encryption and asymmetric encryption.
97. How can you implement secure communication using HTTPS and TLS in a C# application?
98. Describe the benefits and challenges of using NuGet packages in large-scale projects.
99. How can you manage package versioning and resolve conflicts in a C# project?
100. Describe the concept of code coverage and how it can be measured and improved.
101. How can you ensure the reliability of unit tests in a large and complex codebase?
102. Explain how you can use reflection to generate code dynamically.
103. What are Roslyn analyzers, and how can they be used to enforce coding standards and best practices?
104. How can you profile and analyze the performance of a C# application in a senior developer role?
105. Explain the differences between value types and reference types in terms of performance.
106. Describe the Common Type System (CTS) and how it facilitates interoperability between languages.
107. What is the Global Assembly Cache (GAC), and when might you use it in a C# application?